import tkinter as tk
from tkinter import messagebox, simpledialog
import openai

# Set your OpenAI API key here (ensure you keep this key secure)
openai.api_key = 'ENTER API KEY'

def launch_felder_silverman():
    # Define the questions for Felder-Silverman questionnaire
    questions = [
        # Add all questions from the Felder-Silverman questionnaire here
    ]

     "I understand something better after I (a) try it out. (b) think it through. (Question 1)",
    "I would rather be considered (a) realistic. (b) innovative. (Question 2)",
     "When I think about what I did yesterday, I am most likely to get (a) a picture. (b) words. (Question 3)",
    "I tend to understand details of a subject but may be fuzzy about its overall structure. (Question 4)",
    "When I am learning something new, it helps me to (a) talk about it. (b) think about it. (Question 5)",
    "If I were a teacher, I would rather teach a course (a) that deals with facts and real life situations. (b) that deals with ideas and theories. (Question 6)",
    "I prefer to get new information in (a) pictures, diagrams, graphs, or maps. (b) written directions or verbal information. (Question 7)",
    "Once I understand (a) all the parts, I understand the whole thing. (b) the whole thing, I see how the parts fit. (Question 8)",
    "In a study group working on difficult material, I am more likely to (a) jump in and contribute ideas. (b) sit back and listen. (Question 9)",
    "I find it easier (a) to learn facts. (b) to learn concepts. (Question 10)",
    "In a book with lots of pictures and charts, I am likely to (a) look over the pictures and charts carefully. (b) focus on the written text. (Question 11)",
    "When I solve math problems (a) I usually work my way to the solutions one step at a time. (b) I often just see the solutions but then have to struggle to figure out the steps to get to them. (Question 12)",
    "In classes I have taken (a) I have usually gotten to know many of the students. (b) I have rarely gotten to know many of the students. (Question 13)",
    "In reading nonfiction, I prefer (a) something that teaches me new facts or tells me how to do something. (b) something that gives me new ideas to think about. (Question 14)",
    "I like teachers (a) who put a lot of diagrams on the board. (b) who spend a lot of time explaining. (Question 15)",
    "When I'm analyzing a story or a novel (a) I think of the incidents and try to put them together to figure out the themes. (b) I just know what the themes are when I finish reading and then I have to go back and find the incidents that demonstrate them. (Question 16)",
    "When I start a homework problem, I am more likely to (a) start working on the solution immediately. (b) try to fully understand the problem first. (Question 17)",
    "I prefer the idea of (a) certainty. (b) theory. (Question 18)",
    "I remember best (a) what I see. (b) what I hear. (Question 19)",
    "It is more important to me that an instructor (a) lay out the material in clear sequential steps. (b) give me an overall picture and relate the material to other subjects. (Question 20)",
    "I prefer to study (a) in a study group. (b) alone. (Question 21)",
    "I am more likely to be considered (a) careful about the details of my work. (b) creative about how to do my work. (Question 22)",
    "When I get directions to a new place, I prefer (a) a map. (b) written instructions. (Question 23)",
    "I learn (a) at a fairly regular pace. If I study hard, I'll 'get it.' (b) in fits and starts. I'll be totally confused and then suddenly it all 'clicks.' (Question 24)",
    "I would rather first (a) try things out. (b) think about how I'm going to do it. (Question 25)",
    "When I am reading for enjoyment, I like writers to (a) clearly say what they mean. (b) say things in creative, interesting ways. (Question 26)",
    "When I see a diagram or sketch in class, I am most likely to remember (a) the picture. (b) what the instructor said about it. (Question 27)",
    "When considering a body of information, I am more likely to (a) focus on details and miss the big picture. (b) try to understand the big picture before getting into the details. (Question 28)",
    "I more easily remember (a) something I have done. (b) something I have thought a lot about. (Question 29)",
    "When I have to perform a task, I prefer to (a) master one way of doing it. (b) come up with new ways of doing it. (Question 30)",
    "When someone is showing me data, I prefer (a) charts or graphs. (b) text summarizing the results. (Question 31)",
    "When writing a paper, I am more likely to (a) work on (think about or write) the beginning of the paper and progress forward. (b) work on (think about or write) different parts of the paper and then order them. (Question 32)",
    "When I have to work on a group project, I first want to (a) have 'group brainstorming' where everyone contributes ideas. (b) brainstorm individually and then come together as a group to compare ideas. (Question 33)",
    "I consider it higher praise to call someone (a) sensible. (b) imaginative. (Question 34)",
    "When I meet people at a party, I am more likely to remember (a) what they looked like. (b) what they said about themselves. (Question 35)",
    "When I am learning a new subject, I prefer to (a) stay focused on that subject, learning as much about it as I can. (b) try to make connections between that subject and related subjects. (Question 36)",
    "I am more likely to be considered (a) outgoing. (b) reserved. (Question 37)",
    "I prefer courses that emphasize (a) concrete material (facts, data). (b) abstract material (concepts, theories). (Question 38)",
    "For entertainment, I would rather (a) watch television. (b) read a book. (Question 39)",
    "Some teachers start their lectures with an outline of what they will cover. Such outlines are (a) somewhat helpful to me. (b) very helpful to me. (Question 40)",
    "The idea of doing homework in groups, with one grade for the entire group, (a) appeals to me. (b) does not appeal to me. (Question 41)",
    "When I am doing long calculations, (a) I tend to repeat all my steps and check my work carefully. (b) I find checking my work tiresome and have to force myself to do it. (Question 42)",
    "I tend to picture places I have been (a) easily and fairly accurately. (b) with difficulty and without much detail. (Question 43)",
    "When solving problems in a group, I would be more likely to (a) think of the steps in the solution process. (b) think of possible consequences or applications of the solution in a wide range of areas. (Question 44)"
    # Include all questions up to Question 44
    # Add all remaining questions following the same pattern up to Question 44
]

# Define which questions belong to which learning style
learning_styles = {
    'Active/Reflective': [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41],
    'Sensing/Intuitive': [2, 6, 10, 14, 18, 22, 26, 30, 34, 38, 42],
    'Visual/Verbal': [3, 7, 11, 15, 19, 23, 27, 31, 35, 39, 43],
    'Sequential/Global': [4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44]
}

# Initialize response storage
responses = {}

# Create the main window
root = tk.Tk()
root.title("Learning Styles Questionnaire")

def show_question_window(questions_subset):
    window = tk.Toplevel(root)
    var_dict = {}
    for question in questions_subset:
        frame = tk.Frame(window)
        frame.pack(padx=5, pady=5, fill='x')
        text, q_num = question.rsplit(" (", 1)
        q_num = q_num.strip(')')
        question_label = tk.Label(frame, text=text, wraplength=400)
        question_label.pack(side='left')
        var = tk.StringVar(value='')
        var_dict[q_num] = var
        tk.Radiobutton(frame, text="a", variable=var, value='a').pack(side='left')
        tk.Radiobutton(frame, text="b", variable=var, value='b').pack(side='left')
    responses[window] = var_dict

def calculate_and_show_results():
    # Aggregate all responses
    all_responses = {}
    for window_vars in responses.values():
        for q_num, var in window_vars.items():
            all_responses[q_num] = var.get()

    # Calculate scores
    scores = {style: 0 for style in learning_styles}
    for style, question_nums in learning_styles.items():
        for q_num in question_nums:
            response = all_responses.get(f"Question {q_num}")
            if response == 'a':
                scores[style] -= 1
            elif response == 'b':
                scores[style] += 1

    # Show results
    result_text = "\n".join(f"{style}: {scores[style]}" for style in scores)
    messagebox.showinfo("Results", result_text)

# Split questions into four parts and create buttons to show them
parts = [questions[i:i+11] for i in range(0, len(questions), 11)]
for i, part in enumerate(parts):
    button = tk.Button(root, text=f"Part {i+1}", command=lambda p=part: show_question_window(p))
    button.pack(pady=5)

# Button to calculate results
result_button = tk.Button(root, text="Calculate Results", command=calculate_and_show_results)
result_button.pack(pady=20)

def launch_learning_styles():
    # This function should include your Learning Styles questionnaire and scoring
    pass
averages_text = "Average scores:\n"
    categories = list(questions.keys())
    average_scores = []
    for i, scores in enumerate(local_scores):
        category = categories[i]
        category_scores = [score.get() for score in scores]
        average = sum(category_scores) / len(category_scores)
        averages_text += f"{category}: {average:.1f}\n"
        average_scores.append(average)

    messagebox.showinfo("Average Scores", averages_text)

# Main Tkinter window
root = tk.Tk()
root.title("Learning Styles Questionnaire")

# Dictionary containing questions for each learning dimension
questions = {
    "Active/Reflective": [
        "I clearly understand a subject through problem-solving.",
        "I like presentations in small groups",
        "When I start to solve a problem, I am more likely to first analyze the problem and then work on the solution.",
        "I prefer using simulators to acquire new knowledge.",
        "When you have difficulty understanding a new subject, using analogies makes it easier to acquire this knowledge."
    ],
    "Sequential/Global": [
        "To appropriate theoretical knowledge, I require the use of simulations or business practices",
        "It's easier for me to acquire new knowledge using mind maps or conceptual maps",
        "I like solving any kind of problems to develop an innovative character.",
        "Collecting and analyzing data helps me acquire new knowledge.",
        "I like to acquire new knowledge and associate it practically using virtual reality."
    ],
    "Sensing/Intuitive": [
        "To remember the knowledge acquired from the previous day, it is more likely that I do it based on images.",
        "To acquire new knowledge, it is necessary to do it through expository classes accompanied by texts.",
        "I like it when the teacher uses diagrams on the board to explain a theoretical concept.",
        "When someone gives me directions to look for something, I prefer that they indicate it to me through a written instruction.",
        "When the teacher guides the data processing, I prefer that it be done through the use of graphics."
    ],
    "Visual/Verbal": [
        "I like to apply the theoretical concept acquired in the development of classes through an integrative project.",
        "I like solving tasks left by the teacher for home.",
        "When I solve problems applied to general engineering, I generally work on solutions step by step.",
        "When I approach a case study, I prefer to jump between different parts as it seems more relevant at the moment.",
        "When I analyze information, I focus on the details and lose sight of the overall picture."
    ]
}

# List to store local scores for each category
local_scores_list = []

for category, qs in questions.items():
    local_scores = create_window_for_category(category, qs, root)
    local_scores_list.append(local_scores)

# Function to submit answers and calculate averages
def submit_answers():
    calculate_averages(local_scores_list)

submit_btn = tk.Button(root, text="Submit Answers", command=submit_answers)
submit_btn.pack(pady=20)

def ask_gpt():
    question = simpledialog.askstring("Ask GPT", "What do you want to ask?")
    if question:
        try:
            response = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=[{"role": "system", "content": "You are helpful."}, {"role": "user", "content": question}]
            )
            messagebox.showinfo("GPT Response", response.choices[0].message['content'])
        except Exception as e:
            messagebox.showerror("Error", f"Failed to fetch response: {str(e)}")

# Main application window
root = tk.Tk()
root.title("Comprehensive Learning Styles Interface")

# Buttons to launch each questionnaire and chat
btn_felder_silverman = tk.Button(root, text="Felder-Silverman Questionnaire", command=launch_felder_silverman)
btn_felder_silverman.pack(pady=10)

btn_learning_styles = tk.Button(root, text="My Learning Styles Questionnaire", command=launch_learning_styles)
btn_learning_styles.pack(pady=10)

btn_chat_gpt = tk.Button(root, text="Ask Chat GPT", command=ask_gpt)
btn_chat_gpt.pack(pady=10)

root.mainloop()
