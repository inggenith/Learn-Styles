import numpy as np
import pandas as pd
from keras.models import Sequential
from keras.layers import SimpleRNN, Dense
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error

# Load the dataset from Excel file
file_path = "D:\\USER\\Downloads\\complete__weekly_scores.xlsx"

try:
    data = pd.read_excel(file_path)
except Exception as e:
    print("Error loading the dataset:", e)
    exit()

# Check the structure of the data
print("Shape of data:", data.shape)
print("Columns of data:", data.columns)

# Assuming the data has columns: Student number, Learning Dimension, Week 1, ..., Week 16

# Extract relevant columns and reshape the data
num_input_weeks = 5
num_output_weeks = 11

# Assuming each row corresponds to a student's scores for each learning dimension over 16 weeks
# Reshape the data to have one row per student, and each column representing a week's score for a learning dimension

# We will then extract input-output pairs from each row
# Ensure the dataset is sorted by student number and learning dimension for consistency

# For simplicity, let's focus on the first few rows of the data
# You can remove the slicing [:58] to process the entire dataset once the code works for all students
data_train = data.iloc[:58]
data_test = data.iloc[58:]

# Lists to store MSE, MAE, R^2 scores for each student
mse_scores = []
mae_scores = []
r2_scores = []

# Extract input-output pairs from training data
input_sequences_train = []
output_sequences_train = []

for index, row in data_train.iterrows():
    scores = row.iloc[2:-2].values  # Extract scores from Week 1 to Week 16

    # Extract input-output pairs
    for i in range(len(scores) - num_input_weeks - num_output_weeks + 1):
        input_sequence = scores[i:i+num_input_weeks]
        output_sequence = scores[i+num_input_weeks:i+num_input_weeks+num_output_weeks]
        input_sequences_train.append(input_sequence)
        output_sequences_train.append(output_sequence)

# Convert to numpy arrays
X_train = np.array(input_sequences_train).astype('float32')  # Convert to float32 explicitly
y_train = np.array(output_sequences_train).astype('float32')  # Convert to float32 explicitly

# Define RNN model
model = Sequential([
    SimpleRNN(64, activation='relu', input_shape=(num_input_weeks, 1)),
    Dense(num_output_weeks)
])

# Compile the model
model.compile(optimizer='adam', loss='mse')

# Reshape input data for RNN model
X_train = X_train.reshape((X_train.shape[0], X_train.shape[1], 1))

# Train RNN model
model.fit(X_train, y_train, epochs=100, verbose=0)

# Make predictions on training data
y_pred_train = model.predict(X_train, verbose=0)

# Flatten the predictions and true labels for calculating MSE, MAE, and R^2 on training data
y_pred_flat_train = y_pred_train.flatten()
y_true_flat_train = y_train.flatten()

# Calculate MSE, MAE, and R^2 scores on training data
mse_train = mean_squared_error(y_true_flat_train, y_pred_flat_train)
mae_train = mean_absolute_error(y_true_flat_train, y_pred_flat_train)
r2_train = r2_score(y_true_flat_train, y_pred_flat_train)

print("Mean Squared Error (MSE) for the training dataset:", mse_train)
print("Mean Absolute Error (MAE) for the training dataset:", mae_train)
print("R^2 Score for the training dataset:", r2_train)

# Extract input-output pairs from test data
input_sequences_test = []
output_sequences_test = []

for index, row in data_test.iterrows():
    scores = row.iloc[2:-2].values  # Extract scores from Week 1 to Week 16

    # Extract input-output pairs
    for i in range(len(scores) - num_input_weeks - num_output_weeks + 1):
        input_sequence = scores[i:i+num_input_weeks]
        output_sequence = scores[i+num_input_weeks:i+num_input_weeks+num_output_weeks]
        input_sequences_test.append(input_sequence)
        output_sequences_test.append(output_sequence)

# Convert to numpy arrays
X_test = np.array(input_sequences_test).astype('float32')  # Convert to float32 explicitly
y_test = np.array(output_sequences_test).astype('float32')  # Convert to float32 explicitly

# Reshape input data for RNN model
X_test = X_test.reshape((X_test.shape[0], X_test.shape[1], 1))

# Make predictions on test data
y_pred_test = model.predict(X_test, verbose=0)

# Flatten the predictions and true labels for calculating MSE, MAE, and R^2 on test data
y_pred_flat_test = y_pred_test.flatten()
y_true_flat_test = y_test.flatten()

# Calculate MSE, MAE, and R^2 scores on test data
mse_test = mean_squared_error(y_true_flat_test, y_pred_flat_test)
mae_test = mean_absolute_error(y_true_flat_test, y_pred_flat_test)
r2_test = r2_score(y_true_flat_test, y_pred_flat_test)

print("Mean Squared Error (MSE) for the test dataset:", mse_test)
print("Mean Absolute Error (MAE) for the test dataset:", mae_test)
print("R^2 Score for the test dataset:", r2_test)

